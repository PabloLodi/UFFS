create [or replace] function <nome>
		([<parameters>])
			returns <tipo>
as $<nome>$



$<nome>$ language 'plpgsql';



DECLARE = onde se declara as variáveis
BEGIN
END;
DROP FUNCTION NOME(Parametros)


DECLARE NOME TIPO
	INTEGER
	TEXT
	VARCHAR(30)

Exemplo de programinha


CREATE FUNCTION USELESS() RETURNS VOID
as $$
DECLARE
N INT;
BEGIN
N:=5;
raise notice 'n=%', n;

END
$$
LANGUAGE 'plpgsql';^C




Para exibir mensagens na tela utiliza-se o comando RAISE
							NOTICE
							EXCEPTION

Para fazer um laço (FOR), utiliza a seguinte sintaxe:

FOR <var> IN <inicio> .. <fim> LOOP



END LOOP;


WHILE <condicao> LOOP

END LOOP;

O BREAK É: exit when(CONDIÇÃO)


LOOP
	EXIT WHEN()
END LOOP


POTENCIAÇÃO

CREATE OR REPLACE FUNCTION POTENCIA (B INT, E INT) RETURNS INT AS
$$
DECLARE
	R INT;
	I INT;
BEGIN
	R:=1;
	I:=1;
	WHILE(i<=e) LOOP
		r:=r*b;
		i:=i+1;
	END LOOP;
	return r;
end;
$$
LANGUAGE 'PLPGSQL';



CREATE OR REPLACE FUNCTION FTAB (KEY int) returns void
as $FTAB$
	DECLARE
		NOME MYTAB.B%TYPE;
	BEGIN
		SELECT B INTO NOME FROM MYTAB WHERE A = KEY;
		IF NOT FOUND
		THEN
			RAISE NOTICE 'ENCONTROU NULO';
			RETURN;
		END IF;
		RAISE NOTICE '%', NOME;
	END;
$FTAB$
LANGUAGE 'PLPGSQL';




CREATE OR REPLACE FUNCTION MEUSQL() RETURNS VOID
AS
$MEUSQL$
	DECLARE
		MREC MYTAB%ROWTYPE;
	BEGIN
		FOR MREC IN SELECT * FROM MYTAB LOOP
			RAISE NOTICE 'KEY: %', MREC.A;
			RAISE NOTICE 'DATA: %', MREC.B;
		END LOOP;
	END;
$MEUSQL$
LANGUAGE 'PLPGSQL';




CREATE OR REPLACE FUNCTION FROMMARS(N SMALLINT, M SMALLINT) RETURNS INTEGER
AS
$FROMMARS$
	BEGIN
		RETURN N*M + N+M;
	END
$FROMMARS$
LANGUAGE 'PLPGSQL';


A FUNÇÃO DE CASTING DO POSTGRESS É A SEGUINTE

CAST(#VALOR# AS #TIPO#);

EXEMPLO PARA SER UTILIZADO NO EXEMPLO ACIMA

SELECT FROMMARS(CAST(1 AS SMALLINT),CAST(3 AS SMALLINT));


//TRIGGERS





CREATE OR REPLACE FUNCTION emp_stamp() RETURNS trigger AS $emp_stamp$
    BEGIN
    	IF TG_OP = 'DELETE'
    	THEN
    		INSERT INTO emp_audit VALUES(OLD.empname,OLD.salary,current_timestamp,current_user,TG_OP);
    		RETURN OLD;
    	END IF;
        INSERT INTO emp_audit VALUES(NEW.empname,NEW.salary,current_timestamp,current_user,TG_OP);
        RETURN NEW;
    END;
$emp_stamp$ LANGUAGE plpgsql;














ANOTAÇÕES 2015-1
------------------------------------------------------------

RAISE NOTICE 'mensagem % %', a,b;
raise exception




CREATE OR REPLACE FUNCTION HW() RETURNS VOID AS $HW$
BEGIN
	RAISE NOTICE 'Olá Mundo';
END;
$HW$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION HW(STR VARCHAR) RETURNS VOID AS $HW$
BEGIN
	RAISE NOTICE '%',STR;
END;
$HW$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION MYSUM(A INT, B INT) RETURNS INT AS $HW$
BEGIN
	RETURN A+B;
END;
$HW$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION FAT(N INTEGER) RETURNS INT AS $FAT$
DECLARE
	F INTEGER := 1;
	I INTEGER;
BEGIN
	FOR I IN 2..N LOOP
		F:= F*I;
	END LOOP;
	RETURN F;
END;
$FAT$ LANGUAGE plpgsql;


DECLARAÇÃO DE VARIAVEIS EM TIPO DE TABELA

c cliente.catalogo%type;
tcliente cliente%rowtype;



Triggers

CREATE OR REPALCE TRIGGER nome_da_trigger
[BEFORE|AFTER] INSERT OR UPDATE OR DELETE
ON nome_da_tabela
FOR [STATEMENT| EACH ROW] EXECUTE funcao_da_trigger();
